Day1Proj2 - Request Management System in C#

This project simulates a simple request management system involving Agents and Requests.

────────────────────────────────────────────
📁 Project Structure:
────────────────────────────────────────────

- Models/
  - Agent.cs
  - Request.cs
- Program.cs

────────────────────────────────────────────
👣 Step-by-Step Implementation:
────────────────────────────────────────────

1️⃣ Create the Agent class (Agent.cs)
----------------------------------------
Code:
using System;

namespace Day1Proj2.Models
{
    public class Agent
    {
        public int AgentId { get; set; }
        public string AgentName { get; set; }
        public string AgentRole { get; set; }

        public Agent(int id, string name, string role)
        {
            AgentId = id;
            AgentName = name;
            AgentRole = role;
        }

        public static void DisplayAgent(Agent agent)
        {
            Console.WriteLine("------ Agent Info ------");
            Console.WriteLine($"Id: {agent.AgentId}");
            Console.WriteLine($"Name: {agent.AgentName}");
            Console.WriteLine($"Role: {agent.AgentRole}");
        }
    }
}

2️⃣ Create the Request class (Request.cs)
----------------------------------------
Code:
using System;

namespace Day1Proj2.Models
{
    public class Request
    {
        public int RequestId { get; set; }
        public string RequestDescription { get; set; }
        public string Reqstatus { get; private set; }
        public DateTime CreatedOn { get; private set; }
        public float ResolutionTime { get; private set; }
        public bool IsClosed { get; private set; }
        public Agent AssignedBy { get; set; }
        public Agent AssignedTo { get; set; }

        public Request(int id, string description, Agent agentFrom, Agent agentTo)
        {
            RequestId = id;
            RequestDescription = description;
            Reqstatus = "Not Resolved";
            CreatedOn = DateTime.Now;
            ResolutionTime = 0;
            IsClosed = false;
            AssignedBy = agentFrom;
            AssignedTo = agentTo;
        }

        public void ResolveRequest()
        {
            IsClosed = true;
            Reqstatus = "Resolved";
            ResolutionTime = (float)(DateTime.Now - CreatedOn).TotalHours;
        }

        public static void ReassignRequest(Request req, Agent agent)
        {
            if (req.IsClosed)
            {
                Console.WriteLine("Cannot reassign a closed request.");
                return;
            }
            else
            {
                req.AssignedTo = agent;
            }
        }

        public static void DisplayRequest(Request request) {
            Console.WriteLine("------ Request Info ------");
            Console.WriteLine($"RequestId: {request.RequestId}");
            Console.WriteLine($"Description: {request.RequestDescription}");
            Console.WriteLine($"Status: {request.Reqstatus}");
            Console.WriteLine($"Created On: {request.CreatedOn}");
            Console.WriteLine($"Resolution Time (in hours): {request.ResolutionTime}");
            Console.WriteLine($"Assigned By: {request.AssignedBy.AgentName}");
            Console.WriteLine($"Assigned To: {request.AssignedTo.AgentName}");
        }
    }
}

3️⃣ Create the Main Program (Program.cs)
----------------------------------------
Code:
using Day1Proj2.Models;
using System;

public class Program
{
    public static void Main(string[] args)
    {
        Agent agent1 = new Agent(1, "Alice", "Developer");
        Agent agent2 = new Agent(2, "Bob", "Tester");

        Request req1 = new Request(101, "Unable to login with valid credentials", agent2, agent1);
        Request req2 = new Request(102, "Add dark mode to the application", agent1, agent2);

        Console.WriteLine("----- Request Summary Before Reassignment -----");
        Request.DisplayRequest(req1);
        Request.DisplayRequest(req2);

        Console.WriteLine("\n----- Reassigning Requests -----");
        Request.ReassignRequest(req1, agent2);
        Request.ReassignRequest(req2, agent1);

        req1.ResolveRequest();
        req2.ResolveRequest();

        Console.WriteLine("\n----- Request Summary After Closing -----");
        Request.DisplayRequest(req1);
        Request.DisplayRequest(req2);
    }
}

────────────────────────────────────────────
📌 Summary:
────────────────────────────────────────────

✔ Demonstrates OOP concepts like Encapsulation, Composition, Static Methods, and Data Validation.
✔ Shows how requests are created, reassigned, resolved, and displayed.
✔ Includes timestamps and auto-resolution time calculation.